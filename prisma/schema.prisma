datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            Int                 @id @default(autoincrement())
  name          String?
  email         String?             @unique
  emailVerified DateTime?
  image         String?
  password      String? // Optional, if you're using local authentication
  projects      Project[]           @relation("UserProjects")
  tasks         Task[]              @relation("AssignedTasks")
  calendar      Calendar?
  roles         UserRole[]
  comments      Comment[]
  timeEntries   TimeEntry[]
  accounts      Account[]
  sessions      Session[]
  notifications UserNotifications[]
  settings      UserSettings?
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
}

model Project {
  id        Int      @id @default(autoincrement())
  name      String
  ownerId   Int
  owner     User     @relation(name: "UserProjects", fields: [ownerId], references: [id])
  tasks     Task[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Task {
  id                Int         @id @default(autoincrement())
  title             String
  description       String?
  projectId         Int
  project           Project     @relation(fields: [projectId], references: [id])
  dueDate           DateTime?
  subtasks          Subtask[]
  assignees         User[]      @relation("AssignedTasks")
  priority          Priority
  managedByAI       Boolean     @default(false)
  estimatedDuration Int? // in minutes
  statusId          Int
  status            TaskStatus  @relation(fields: [statusId], references: [id])
  comments          Comment[]
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  TimeEntry         TimeEntry[]
}

model Subtask {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  taskId      Int
  task        Task     @relation(fields: [taskId], references: [id])
  completed   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Calendar {
  id        Int             @id @default(autoincrement())
  userId    Int             @unique
  user      User            @relation(fields: [userId], references: [id])
  events    CalendarEvent[]
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
}

model CalendarEvent {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  startTime   DateTime
  endTime     DateTime
  calendarId  Int
  calendar    Calendar @relation(fields: [calendarId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model UserRole {
  user   User @relation(fields: [userId], references: [id])
  userId Int
  role   Role @relation(fields: [roleId], references: [id])
  roleId Int

  @@id([userId, roleId])
}

model Role {
  id              Int              @id @default(autoincrement())
  name            String           @unique
  userRoles       UserRole[]
  rolePermissions RolePermission[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model RolePermission {
  role         Role       @relation(fields: [roleId], references: [id])
  roleId       Int
  permission   Permission @relation(fields: [permissionId], references: [id])
  permissionId Int

  @@id([roleId, permissionId])
}

model Permission {
  id              Int              @id @default(autoincrement())
  name            String           @unique
  rolePermissions RolePermission[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  taskId    Int
  task      Task     @relation(fields: [taskId], references: [id])
  authorId  Int
  author    User     @relation(fields: [authorId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TimeEntry {
  id        Int      @id @default(autoincrement())
  taskId    Int
  task      Task     @relation(fields: [taskId], references: [id])
  startTime DateTime
  endTime   DateTime
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TaskStatus {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  tasks     Task[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                 Int       @id @default(autoincrement())
  userId             Int
  user               User      @relation(fields: [userId], references: [id])
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  @@unique([providerId, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  userId       Int
  user         User     @relation(fields: [userId], references: [id])
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model UserNotifications {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  title     String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
}

model UserSettings {
  id          Int      @id @default(autoincrement())
  userId      Int      @unique
  user        User     @relation(fields: [userId], references: [id])
  preferences Json // Stores detailed user preferences and settings
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}
